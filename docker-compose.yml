version: "3.7"
services:
  frontend:
    image: react-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - IMAGE_NAME=${FRONTEND_IMAGE}
        - IMAGE_VERSION=${FRONTEND_NODE_VERSION}
        - IMAGE_TAG=${FRONTEND_NODE_TAG}
        - HOME=${APP_HOME}
        - NPM_VERSION=${FRONTEND_NPM_VERSION}
    container_name: react-frontend
    environment:
      - BACKEND_WEBSERVER_HOST=${BACKEND_WEBSERVER_HOST}
      - BACKEND_WS_HOST=${BACKEND_WS_HOST}
    volumes:
      - ./frontend/public:${APP_HOME}/public
      - ./frontend/src:${APP_HOME}/src
      - ./frontend/build:${APP_HOME}/build
    ports:
      - ${FRONTEND_REAL_HOST_PORT}:${FRONTEND_VIRTUAL_HOST_PORT}
    restart: ${RESTART_POLICY}
    # command: serve -s build

  backend:
    image: node-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - IMAGE_NAME=${BACKEND_IMAGE}
        - IMAGE_VERSION=${BACKEND_NODE_VERSION}
        - IMAGE_TAG=${BACKEND_NODE_TAG}
        - HOME=${APP_HOME}
        - NPM_VERSION=${BACKEND_NPM_VERSION}
    container_name: node-backend
    environment:
      - DATABASE_ADMIN_USER=${DATABASE_ADMIN_USER}
      - DATABASE_ADMIN_PASSWORD=${DATABASE_ADMIN_PASSWORD}
      - WEATHER_DATABASE_NAME=${WEATHER_DATABASE_NAME}
      - USER_DATABASE_NAME=${USER_DATABASE_NAME}
      - LOGGER_DATABASE_NAME=${LOGGER_DATABASE_NAME}
      - DATABASE_PORT=${DATABASE_VIRTUAL_HOST_PORT}
      - DATABASE_HOST=database
      - WEBSER_PORT=${BACKEND_VIRTUAL_WEBSERVER_HOST_PORT}
      - WS_PORT=${BACKEND_VIRTUAL_WS_HOST_PORT}
      - JWT_SECRET=testing!
      - SMTP_EMAIL=${SMTP_EMAIL}
      - SMTP_EMAIL_PW=${SMTP_EMAIL_PW}
      - FRONTEND_HOST=${FRONTEND_HOST}
    volumes:
      - ./backend/index.js:${APP_HOME}/index.js
      - ./backend/backendConfig.js:${APP_HOME}/backendConfig.js
      - ./backend/errorConfig.js:${APP_HOME}/errorConfig.js
      - ./backend/generalUtils:${APP_HOME}/generalUtils
      - ./backend/fetcherUtils:${APP_HOME}/fetcherUtils
      - ./backend/routes:${APP_HOME}/routes
      - ./backend/apiSpec.json:${APP_HOME}/apiSpec.json
      - ./backend/databaseUtils:${APP_HOME}/databaseUtils
      - ./backend/logs:${APP_HOME}/logs
      - ./backend/websocket:${APP_HOME}/websocket
    ports:
      - ${BACKEND_REAL_WEBSERVER_HOST_PORT}:${BACKEND_VIRTUAL_WEBSERVER_HOST_PORT}
      - ${BACKEND_REAL_WS_HOST_PORT}:${BACKEND_VIRTUAL_WS_HOST_PORT}
    restart: ${RESTART_POLICY}
    tty: true
    command: npm run start

  database:
    image: mongodb-database
    build:
      context: ./database
      dockerfile: database.Dockerfile
      args:
        - IMAGE_NAME=${DATABASE_IMAGE}
        - IMAGE_VERSION=${DATABASE_VERSION}
        - IMAGE_TAG=${DATABASE_TAG}
    restart: ${RESTART_POLICY}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_ADMIN_PASSWORD}
    volumes:
      - ./database/data:/data/db
    ports:
      - 37017:27017
    container_name: mongodb-database

  webserver:
    image: webserver
    build:
      context: ./webserver
      dockerfile: Dockerfile
      args:
        - IMAGE_NAME=${WEBSERVER_IMAGE}
        - IMAGE_VERSION=${WEBSERVER_VERSION}
        - IMAGE_TAG=${WEBSERVER_TAG}
    container_name: webserver
    restart: ${RESTART_POLICY}
    network_mode: host

  database-client:
    image: mongodb-database-client
    build:
      context: ./database
      dockerfile: database.client.Dockerfile
      args:
        - IMAGE_NAME=${DATABASE_CLIENT_IMAGE}
        - IMAGE_VERSION=${DATABASE_CLIENT_VERSION}
        - IMAGE_TAG=${DATABASE_CLIENT_TAG}
    container_name: mongodb-database-client
    restart: ${RESTART_POLICY}
    depends_on:
      - database
    ports:
      - ${DBCLIENT_REAL_HOST_PORT}:${DATABASE_CLIENT_VIRTUAL_HOST_PORT}
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${DATABASE_ADMIN_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DATABASE_ADMIN_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${DATABASE_CLIENT_URL}
